!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	real_controller.c	52;"	d	file:
AXLE_LENGTH	real_controller.c	35;"	d	file:
DELTA_T	real_controller.c	38;"	d	file:
FLOCK_SIZE	real_controller.c	32;"	d	file:
K_TH	real_controller.c	59;"	d	file:
K_U	real_controller.c	60;"	d	file:
K_W	real_controller.c	61;"	d	file:
K_X	real_controller.c	57;"	d	file:
K_Y	real_controller.c	58;"	d	file:
MARGINAL_THRESHOLD	real_controller.c	54;"	d	file:
MAX_SENS	real_controller.c	27;"	d	file:
MAX_SPEED	real_controller.c	28;"	d	file:
MAX_SPEED_WEB	real_controller.c	30;"	d	file:
MIGRATION_WEIGHT	real_controller.c	48;"	d	file:
MIGRATORY_URGE	real_controller.c	50;"	d	file:
MIN_SENS	real_controller.c	26;"	d	file:
M_PI	real_controller.c	24;"	d	file:
NB_SENSORS	real_controller.c	25;"	d	file:
RULE1_THRESHOLD	real_controller.c	40;"	d	file:
RULE1_WEIGHT	real_controller.c	41;"	d	file:
RULE2_THRESHOLD	real_controller.c	43;"	d	file:
RULE2_WEIGHT	real_controller.c	44;"	d	file:
RULE3_WEIGHT	real_controller.c	46;"	d	file:
SPEED_UNIT_RADS	real_controller.c	36;"	d	file:
TIME_STEP	real_controller.c	33;"	d	file:
WHEEL_RADIUS	real_controller.c	37;"	d	file:
compute_wheel_speeds	real_controller.c	/^void compute_wheel_speeds(int *msl, int *msr) {$/;"	f
e_puck_matrix	real_controller.c	/^int e_puck_matrix[16] = {18,  28,  36,  10, 8,  -36, -58, -72, -72, -58, -36, 8,  10, 36,  28,  18};$/;"	v
init_pos	real_controller.c	/^int init_pos = 0;$/;"	v
initialized	real_controller.c	/^int initialized[FLOCK_SIZE];  \/\/ != 0 if initial positions have been received$/;"	v
limit	real_controller.c	/^void limit(int *number, int limit) {$/;"	f
main	real_controller.c	/^int main() {$/;"	f
migr	real_controller.c	/^float migr[2] = {0, 5};    \/\/ Migration vector$/;"	v
my_position	real_controller.c	/^float my_position[3];                 \/\/ X, Z, Theta of the current robot$/;"	v
prev_my_position	real_controller.c	/^float prev_my_position[3];   \/\/ X, Z, Theta of the current robot in the previous$/;"	v
prev_relative_pos	real_controller.c	/^float prev_relative_pos[FLOCK_SIZE][3]; \/\/ Previous relative  X, Z, Theta values$/;"	v
process_received_ping_messages	real_controller.c	/^void process_received_ping_messages(void) {$/;"	f
relative_pos	real_controller.c	/^float relative_pos[FLOCK_SIZE][3];  \/\/ relative X, Z, Theta of all robots$/;"	v
relative_speed	real_controller.c	/^float relative_speed[FLOCK_SIZE][2];  \/\/ Speeds calculated with Reynold's rules$/;"	v
reset	real_controller.c	/^static void reset() {$/;"	f	file:
reynolds_rules	real_controller.c	/^void reynolds_rules() {$/;"	f
robot_id	real_controller.c	/^int robot_id_u, robot_id;$/;"	v
robot_id_u	real_controller.c	/^int robot_id_u, robot_id;$/;"	v
robot_name	real_controller.c	/^char *robot_name;$/;"	v
send_ping	real_controller.c	/^void send_ping(void) {$/;"	f
speed	real_controller.c	/^float speed[FLOCK_SIZE][2];  \/\/ Speeds calculated with Reynold's rules$/;"	v
theta_robots	real_controller.c	/^float theta_robots[FLOCK_SIZE];$/;"	v
update_self_motion	real_controller.c	/^void update_self_motion(int msl, int msr) {$/;"	f
